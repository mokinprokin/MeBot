from aiogram import F, Bot
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    Message,
    CallbackQuery,
    URLInputFile,
)
from .helpers import generate_presentation, validate_channel_membership
from .keyboard import create_inline_keyboard, create_edit_keyboard
from src.queries.orm import AsyncOrm
from config import (
    logger,
    ch_username,
    welcome_pic,
    UserState,
    dp,
    name,
    about,
    target,
    hobby,
)


@dp.message(Command(commands=["start", "help", "restart"]))
async def handle_start(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user_id = message.from_user.id

    if user := await AsyncOrm.get_user_by_id(user_id):
        markup = create_inline_keyboard(
            [
                {"text": "–î–∞, –æ–±–Ω–æ–≤–∏—Ç—å", "callback_data": "restart_flow"},
                {"text": "–ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å", "callback_data": "cancel"},
            ],
            row_width=2,
        )

        await message.answer(
            f"üëã '–ú—ã —É–∂–µ –∑–Ω–∞–∫–æ–º—ã!'\n\n"
            f"–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è —Å–∞–º–æ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è:\n\n{user.presentation}\n\n"
            "–•–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ?",
            reply_markup=markup,
        )
        return

    welcome_image = URLInputFile(welcome_pic)
    markup = create_inline_keyboard(
        [{"text": "–î–∞, –Ω–∞—á–Ω–µ–º!", "callback_data": "start_flow"}]
    )

    await message.answer_photo(
        photo=welcome_image,
        caption=(
            "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n"
            "–Ø –±–æ—Ç –ö–æ–ª–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∞, –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç "
            "—Å–∞–º–æ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –Ω–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥–∞.\n\n"
            "–ú–Ω–µ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, "
            "—á—Ç–æ–±—ã –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç. –ù–∞—á–Ω–µ–º?"
        ),
        reply_markup=markup,
    )


@dp.callback_query(F.data == "start_flow")
async def start_questionnaire(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞ –∏–ª–∏ –µ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫"""
    await callback.message.edit_reply_markup()

    subscribe_markup = create_inline_keyboard(
        [
            {"text": "–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", "url": f"https://t.me/{ch_username[1:]}"},
            {"text": "–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", "callback_data": "check_channel"},
        ],
        row_width=1,
    )

    await callback.message.answer(
        "üîí –ü—Ä–µ–∂–¥–µ —á–µ–º –º—ã –Ω–∞—á–Ω—ë–º, –º–Ω–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–±–µ–¥–∏—Ç—å—Å—è, "
        f"—á—Ç–æ –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª {ch_username}.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:",
        reply_markup=subscribe_markup,
        disable_web_page_preview=True,
    )
    await state.set_state(UserState.awaiting_channel_join)


@dp.message(UserState.collecting_name)
async def collect_name(message: Message, state: FSMContext):
    """Collect user's name"""
    if len(message.text) > 150:
        await message.answer(
            "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ. " "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–ª–æ–∂–∏—Ç–µ—Å—å –≤ 150 —Å–∏–º–≤–æ–ª–æ–≤."
        )
        return

    await state.update_data(name=message.text)

    await message.answer(
        about,
    )
    await state.set_state(UserState.collecting_about)


@dp.message(UserState.collecting_about)
async def collect_about(message: Message, state: FSMContext):
    """Collect about info"""
    if len(message.text) > 200:
        await message.answer(
            "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ. " "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–ª–æ–∂–∏—Ç–µ—Å—å –≤ 200 —Å–∏–º–≤–æ–ª–æ–≤."
        )
        return

    await state.update_data(about=message.text)

    await message.answer(
        target,
    )
    await state.set_state(UserState.collecting_target)


@dp.message(UserState.collecting_target)
async def collect_target(message: Message, state: FSMContext):
    """Collect networking target"""
    if message.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(target=None)
    else:
        await state.update_data(target=message.text)

    markup = create_inline_keyboard(
        [{"text": "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "callback_data": "skip_hobby"}],
        row_width=1,
    )

    await message.answer(
        hobby,
        reply_markup=markup,
    )
    await state.set_state(UserState.collecting_hobby)


@dp.callback_query(F.data == "skip_hobby", UserState.collecting_hobby)
async def skip_hobby(callback: CallbackQuery, state: FSMContext):
    """Skip hobby step"""
    await callback.message.edit_reply_markup()  # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
    await finalize_presentation(callback.message, state)


@dp.message(UserState.collecting_hobby)
async def collect_hobby_and_finalize(message: Message, state: FSMContext):
    """Final step - collect hobby and generate presentation"""
    if message.text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(hobby=None)
    else:
        await state.update_data(hobby=message.text)

    await finalize_presentation(message, state)


async def finalize_presentation(message: Message, state: FSMContext):
    """Common finalization logic"""
    user_id = message.from_user.id
    user_data = await state.get_data()

    try:
        if user := await AsyncOrm.get_user_by_id(user_id):
            await AsyncOrm.update_user_item(
                user_id=user_id,
                name=user_data["name"],
                about=user_data["about"],
                target=user_data.get("target"),
                hobby=user_data.get("hobby"),
            )
        else:
            user = await AsyncOrm.insert_user(
                id=user_id,
                name=user_data["name"],
                about=user_data["about"],
                target=user_data.get("target"),
                hobby=user_data.get("hobby"),
            )

        presentation = await generate_presentation(user_data)
        await AsyncOrm.update_user_presentation(user_id, presentation)

        await message.answer(
            "üéâ –í–∞—à–∞ —Å–∞–º–æ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞!\n\n"
            f"{presentation}\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤ /start",
        )

    except Exception as e:
        logger.error(f"Error saving user data: {e}")
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. "
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
        )

    await state.clear()


@dp.callback_query(F.data == "restart_flow")
async def handle_restart(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å –≤—ã–±–æ—Ä–æ–º –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await callback.message.edit_reply_markup()
    user = await AsyncOrm.get_user_by_id(callback.from_user.id)
    markup = create_edit_keyboard()

    await callback.message.answer(
        f"–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å:\n\n"
        f"–¢–µ–∫—É—â–∞—è —Å–∞–º–æ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è:\n{user.presentation}",
        reply_markup=markup,
    )


@dp.callback_query(F.data.startswith("edit_"))
async def edit_field(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    field = callback.data.split("_")[1]
    prompts = {"name": name, "about": about, "target": target, "hobby": hobby}

    await callback.message.edit_text(prompts[field])
    await state.set_state(getattr(UserState, f"editing_{field}"))
    await state.update_data(editing_field=field)


@dp.message(F.text, UserState.editing_name)
@dp.message(F.text, UserState.editing_about)
@dp.message(F.text, UserState.editing_target)
@dp.message(F.text, UserState.editing_hobby)
async def save_edited_field(message: Message, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—è"""
    user_data = await state.get_data()
    field = user_data["editing_field"]
    text = message.text

    if field == "name" and len(text) > 150:
        await message.answer(
            "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–ª–æ–∂–∏—Ç–µ—Å—å –≤ 150 —Å–∏–º–≤–æ–ª–æ–≤."
        )
        return
    if field == "about" and len(text) > 200:
        await message.answer(
            "‚ö†Ô∏è –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–ª–æ–∂–∏—Ç–µ—Å—å –≤ 200 —Å–∏–º–≤–æ–ª–æ–≤."
        )
        return

    await AsyncOrm.update_user_item(message.from_user.id, **{field: text})
    user = await AsyncOrm.get_user_by_id(message.from_user.id)

    markup = create_edit_keyboard()
    await message.answer(
        f"‚úÖ –ü–æ–ª–µ '{field}' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
        f"–¢–µ–∫—É—â–∞—è —Å–∞–º–æ–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è:\n\n{user.presentation}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=markup,
    )
    await state.set_state(None)


@dp.callback_query(F.data == "regenerate")
async def regenerate_presentation(callback: CallbackQuery):
    """–ü–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏"""
    user = await AsyncOrm.get_user_by_id(callback.from_user.id)
    if not user:
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", show_alert=True)
        return

    user_data = {
        "name": user.name,
        "about": user.about,
        "target": user.target,
        "hobby": user.hobby,
    }

    try:
        presentation = await generate_presentation(user_data)
        await AsyncOrm.update_user_presentation(callback.from_user.id, presentation)

        markup = create_edit_keyboard()
        await callback.message.edit_text(
            f"üéâ –ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞!\n\n{presentation}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=markup,
        )
    except Exception as e:
        logger.error(f"Error regenerating presentation: {e}")
        await callback.answer(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True
        )


@dp.callback_query(F.data == "restart_full")
async def restart_full_questionnaire(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∞–Ω–∫–µ—Ç—ã"""
    await callback.message.edit_reply_markup()  # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏

    subscribe_markup = create_inline_keyboard(
        [
            {"text": "–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª", "url": f"https://t.me/{ch_username[1:]}"},
            {"text": "–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è", "callback_data": "check_channel"},
        ],
        row_width=1,
    )

    await callback.message.answer(
        "üîí –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∞–Ω–∫–µ—Ç—ã –∑–∞–Ω–æ–≤–æ. –ü—Ä–µ–∂–¥–µ —á–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, "
        f"—É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª {ch_username}.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ –∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:",
        reply_markup=subscribe_markup,
        disable_web_page_preview=True,
    )
    await state.set_state(UserState.awaiting_channel_join)


@dp.callback_query(F.data == "finish_editing")
async def finish_editing(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await callback.message.edit_text(
        "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –î–ª—è –Ω–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
    )
    await state.clear()


@dp.message()
async def handle_unrecognized(message: Message):
    """Handle any unrecognized messages"""
    await message.answer(
        "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã."
    )


@dp.callback_query(F.data == "check_channel", UserState.awaiting_channel_join)
async def check_channel_subscription(callback: CallbackQuery, state: FSMContext):
    """Verify channel subscription"""
    if not await validate_channel_membership(callback.from_user.id):
        await callback.answer(
            "–í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!",
            show_alert=True,
        )
        return

    await callback.message.edit_text(
        name,
    )
    await state.set_state(UserState.collecting_name)


@dp.callback_query(F.data == "cancel")
async def cancel_action(callback: CallbackQuery, state: FSMContext):
    """Cancel current action"""
    await callback.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()


@dp.errors()
async def error_handler(event: Exception, bot: Bot):
    """Global error handler"""
    logger.error(f"Error occurred: {event}", exc_info=True)
